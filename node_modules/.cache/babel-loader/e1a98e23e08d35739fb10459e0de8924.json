{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Goit/goit-react-hw-03-training/src/components/App.jsx\";\nimport React, { Component } from 'react';\nimport { SearchBar } from './Searchbar';\nimport { ImageGallery } from './ImageGallery'; // import * as API from 'services/Api';\n// import { Modal } from './Modal';\n\nimport { Circles } from 'react-loader-spinner';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      images: [],\n      isLoading: false // showModal: false,\n      // selectedImage: null,\n\n    };\n  }\n\n  componentDidMount() {} // toggleModal = image => {\n  //   this.setState(({ showModal }) => ({\n  //     showModal: !showModal,\n  //     selectedImage: image,\n  //   }));\n  // };\n  // getImages = async values => {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //     const images = await API.getImages(values);\n  //     this.setState({ images: images.hits });\n  //   } catch (error) {\n  //     console.log(error);\n  //   } finally {\n  //     this.setState({ isLoading: false });\n  //   }\n  // };\n\n\n  render() {\n    // const { isLoading, images, showModal, selectedImage } = this.state;\n    const {\n      isLoading,\n      images\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridGap: '16px',\n        paddingBottom: '24px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSubmit: this.getImages,\n        isSubmitting: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Circles, {\n        height: \"100\",\n        width: \"100\",\n        color: \"#004F98\",\n        ariaLabel: \"circles-loading\",\n        wrapperStyle: {\n          marginTop: '50px',\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        wrapperClass: \"\",\n        visible: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), images.length > 0 ?\n      /*#__PURE__*/\n      // <ImageGallery items={images} onClick={this.toggleModal} />\n      _jsxDEV(ImageGallery, {\n        items: images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Goit/goit-react-hw-03-training/src/components/App.jsx"],"names":["React","Component","SearchBar","ImageGallery","Circles","axios","App","state","images","isLoading","componentDidMount","render","display","gridTemplateColumns","gridGap","paddingBottom","getImages","marginTop","justifyContent","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CACA;AACA;;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACNC,MAAAA,MAAM,EAAE,EADF;AAENC,MAAAA,SAAS,EAAE,KAFL,CAGN;AACA;;AAJM,KADyB;AAAA;;AAQjCC,EAAAA,iBAAiB,GAAG,CAAE,CARW,CAUjC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEF,MAAAA,SAAF;AAAaD,MAAAA;AAAb,QAAwB,KAAKD,KAAnC;AACA,wBACE;AACE,MAAA,KAAK,EAAE;AACLK,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,mBAAmB,EAAE,KAFhB;AAGLC,QAAAA,OAAO,EAAE,MAHJ;AAILC,QAAAA,aAAa,EAAE;AAJV,OADT;AAAA,8BAQE,QAAC,SAAD;AAAW,QAAA,QAAQ,EAAE,KAAKC,SAA1B;AAAqC,QAAA,YAAY,EAAEP;AAAnD;AAAA;AAAA;AAAA;AAAA,cARF,EASGA,SAAS,iBACR,QAAC,OAAD;AACE,QAAA,MAAM,EAAC,KADT;AAEE,QAAA,KAAK,EAAC,KAFR;AAGE,QAAA,KAAK,EAAC,SAHR;AAIE,QAAA,SAAS,EAAC,iBAJZ;AAKE,QAAA,YAAY,EAAE;AACZQ,UAAAA,SAAS,EAAE,MADC;AAEZL,UAAAA,OAAO,EAAE,MAFG;AAGZM,UAAAA,cAAc,EAAE;AAHJ,SALhB;AAUE,QAAA,YAAY,EAAC,EAVf;AAWE,QAAA,OAAO,EAAE;AAXX;AAAA;AAAA;AAAA;AAAA,cAVJ,EAwBGV,MAAM,CAACW,MAAP,GAAgB,CAAhB;AAAA;AACC;AACA,cAAC,YAAD;AAAc,QAAA,KAAK,EAAEX;AAArB;AAAA;AAAA;AAAA;AAAA,cAFD,GAGG,IA3BN;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA4CD;;AA5EgC","sourcesContent":["import React, { Component } from 'react';\nimport { SearchBar } from './Searchbar';\nimport { ImageGallery } from './ImageGallery';\n// import * as API from 'services/Api';\n// import { Modal } from './Modal';\nimport { Circles } from 'react-loader-spinner';\nimport axios from 'axios';\n\nexport class App extends Component {\n  state = {\n    images: [],\n    isLoading: false,\n    // showModal: false,\n    // selectedImage: null,\n  };\n\n  componentDidMount() {}\n\n  // toggleModal = image => {\n  //   this.setState(({ showModal }) => ({\n  //     showModal: !showModal,\n  //     selectedImage: image,\n  //   }));\n  // };\n\n  // getImages = async values => {\n  //   try {\n  //     this.setState({ isLoading: true });\n  //     const images = await API.getImages(values);\n  //     this.setState({ images: images.hits });\n  //   } catch (error) {\n  //     console.log(error);\n  //   } finally {\n  //     this.setState({ isLoading: false });\n  //   }\n  // };\n\n  render() {\n    // const { isLoading, images, showModal, selectedImage } = this.state;\n    const { isLoading, images } = this.state;\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr',\n          gridGap: '16px',\n          paddingBottom: '24px',\n        }}\n      >\n        <SearchBar onSubmit={this.getImages} isSubmitting={isLoading} />\n        {isLoading && (\n          <Circles\n            height=\"100\"\n            width=\"100\"\n            color=\"#004F98\"\n            ariaLabel=\"circles-loading\"\n            wrapperStyle={{\n              marginTop: '50px',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n            wrapperClass=\"\"\n            visible={true}\n          />\n        )}\n        {images.length > 0 ? (\n          // <ImageGallery items={images} onClick={this.toggleModal} />\n          <ImageGallery items={images} />\n        ) : null}\n        {/* {showModal && selectedImage && (\n          <Modal onClose={this.toggleModal}>\n            <img\n              style={{\n                display: 'block',\n                width: '100%',\n                height: 'auto',\n              }}\n              src={selectedImage.largeImageURL}\n              alt={selectedImage.tags}\n            />\n          </Modal> */}\n        {/* )} */}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
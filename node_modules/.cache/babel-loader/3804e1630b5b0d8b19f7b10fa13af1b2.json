{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/Goit/goit-react-hw-03-image-finder/src/components/App.jsx\";\nimport React, { Component } from 'react';\nimport { SearchBar } from './Searchbar/SearchBar';\nimport { ImageGallery } from './ImageGallery/ImageGallery';\nimport * as API from 'services/Api';\nimport { Modal } from './Modal/Modal';\nimport { Circles } from 'react-loader-spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      images: [],\n      isLoading: false,\n      showModal: false,\n      selectedImage: null\n    };\n\n    this.toggleModal = image => {\n      this.setState(_ref => {\n        let {\n          showModal\n        } = _ref;\n        return {\n          showModal: !showModal,\n          selectedImage: image\n        };\n      });\n    };\n\n    this.getImages = async values => {\n      try {\n        this.setState({\n          isLoading: true\n        });\n        const images = await API.getImages(values);\n        this.setState({\n          images: images.hits\n        });\n      } catch (error) {\n        console.log(error);\n      } finally {\n        this.setState({\n          isLoading: false\n        });\n      }\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    const {\n      isLoading,\n      images,\n      showModal,\n      selectedImage\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridGap: '16px',\n        paddingBottom: '24px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSubmit: this.getImages,\n        isSubmitting: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Circles, {\n        height: \"100\",\n        width: \"100\",\n        color: \"#004F98\",\n        ariaLabel: \"circles-loading\",\n        wrapperStyle: {\n          marginTop: '50px',\n          display: 'flex',\n          justifyContent: 'center'\n        },\n        wrapperClass: \"\",\n        visible: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), images.length > 0 ? /*#__PURE__*/_jsxDEV(ImageGallery, {\n        items: images,\n        onClick: this.toggleModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : null, showModal && selectedImage && /*#__PURE__*/_jsxDEV(Modal, {\n        onClose: this.toggleModal,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            display: 'block',\n            width: '100%',\n            height: 'auto'\n          },\n          src: selectedImage.largeImageURL,\n          alt: selectedImage.tags\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/admin/Desktop/Goit/goit-react-hw-03-image-finder/src/components/App.jsx"],"names":["React","Component","SearchBar","ImageGallery","API","Modal","Circles","App","state","images","isLoading","showModal","selectedImage","toggleModal","image","setState","getImages","values","hits","error","console","log","componentDidMount","render","display","gridTemplateColumns","gridGap","paddingBottom","marginTop","justifyContent","length","width","height","largeImageURL","tags"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { SearchBar } from './Searchbar/SearchBar';\nimport { ImageGallery } from './ImageGallery/ImageGallery';\nimport * as API from 'services/Api';\nimport { Modal } from './Modal/Modal';\nimport { Circles } from 'react-loader-spinner';\n\nexport class App extends Component {\n  state = {\n    images: [],\n    isLoading: false,\n    showModal: false,\n    selectedImage: null,\n  };\n\n  toggleModal = image => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n      selectedImage: image,\n    }));\n  };\n\n  componentDidMount() {}\n\n  getImages = async values => {\n    try {\n      this.setState({ isLoading: true });\n      const images = await API.getImages(values);\n      this.setState({ images: images.hits });\n    } catch (error) {\n      console.log(error);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  };\n\n  render() {\n    const { isLoading, images, showModal, selectedImage } = this.state;\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: '1fr',\n          gridGap: '16px',\n          paddingBottom: '24px',\n        }}\n      >\n        <SearchBar onSubmit={this.getImages} isSubmitting={isLoading} />\n        {isLoading && (\n          <Circles\n            height=\"100\"\n            width=\"100\"\n            color=\"#004F98\"\n            ariaLabel=\"circles-loading\"\n            wrapperStyle={{\n              marginTop: '50px',\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n            wrapperClass=\"\"\n            visible={true}\n          />\n        )}\n        {images.length > 0 ? (\n          <ImageGallery items={images} onClick={this.toggleModal} />\n        ) : null}\n\n        {showModal && selectedImage && (\n          <Modal onClose={this.toggleModal}>\n            <img\n              style={{\n                display: 'block',\n                width: '100%',\n                height: 'auto',\n              }}\n              src={selectedImage.largeImageURL}\n              alt={selectedImage.tags}\n            />\n          </Modal>\n        )}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}